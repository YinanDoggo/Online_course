### Adding a new variable to the data frame
We'll be using this new vector to generate some plots, so we'll want to save it
as a permanent column in our data frame.
```{r calc-total-bapt-vars-save}
arbuthnot <- arbuthnot %>%
mutate(total = boys + girls)
```
What in the world is going on here? The `%>%` operator is called the **piping**
operator. Basically, it takes the output of the current line and pipes it into
the following line of code.
<div id="boxedtext">
**A note on piping: ** Note that we can read these three lines of code as the following:
*"Take the `arbuthnot` dataset and **pipe** it into the `mutate` function.
Using this mutate a new variable called `total` that is the sum of the variables
called `boys` and `girls`. Then assign this new resulting dataset to the object
called `arbuthnot`, i.e. overwrite the old `arbuthnot` dataset with the new one
containing the new variable."*
This is essentially equivalent to going through each row and adding up the boys
and girls counts for that year and recording that value in a new column called
total.
</div>
<div id="boxedtext">
**Where is the new variable? ** When you make changes to variables in your dataset,
click on the name of the dataset again to update it in the data viewer.
</div>
You'll see that there is now a new column called `total` that has been tacked on
to the data frame. The special symbol `<-` performs an *assignment*, taking the
output of one line of code and saving it into an object in your workspace. In
this case, you already have an object called `arbuthnot`, so this command updates
that data set with the new mutated column.
We can make a plot of the total number of baptisms per year with the following command.
```{r plot-total-vs-year-line}
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line()
```
Note that using `geom_line()` instead of `geom_point()` results in a line plot instead
of a scatter plot. You want both? Just layer them on:
```{r plot-total-vs-year-line-and-point}
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line() +
geom_point()
```
<div id="exercise">
**Exercise**: Now, generate a plot of the proportion of boys born over time. What
do you see?
</div>
```{r plot-proportion-of-boys-over-time}
# type your code for the Exercise here, and Knit
```
Finally, in addition to simple mathematical operators like subtraction and
division, you can ask R to make comparisons like greater than, `>`, less than,
`<`, and equality, `==`. For example, we can ask if boys outnumber girls in each
year with the expression
```{r boys-more-than-girls}
arbuthnot <- arbuthnot %>%
mutate(more_boys = boys > girls)
```
This command add a new variable to the `arbuthnot` data frame containing the values
of either `TRUE` if that year had more boys than girls, or `FALSE` if that year
did not (the answer may surprise you). This variable contains different kind of
data than we have considered so far. All other columns in the `arbuthnot` data
frame have values are numerical (the year, the number of boys and girls). Here,
we've asked R to create *logical* data, data where the values are either `TRUE`
or `FALSE`. In general, data analysis will involve many different kinds of data
types, and one reason for using R is that it is able to represent and compute
with many of them.
## Dataset 2: Present birth records
In the previous few pages, you recreated some of the displays and preliminary
analysis of Arbuthnot's baptism data. Next you will do a similar analysis,
but for present day birth records in the United States. Load up the
present day data with the following command.
```{r load-present-data}
data(present)
```
The data are stored in a data frame called `present` which should now be loaded in
your workspace.
4. How many variables are included in this data set?
<ol>
<li> 2 </li>
<li> 3 </li>
<li> 4 </li>
<li> 74 </li>
<li> 2013 </li>
</ol>
```{r variables-in-present}
# type your code for Question 4 here, and Knit
```
<div id="exercise">
**Exercise**: What years are included in this dataset? **Hint:** Use the `range`
function and `present$year` as its argument.
</div>
```{r years-in-present-data}
# type your code for Exercise here, and Knit
```
5. Calculate the total number of births for each year and store these values in a new
variable called `total` in the `present` dataset. Then, calculate the proportion of
boys born each year and store these values in a new variable called `prop_boys` in
the same dataset. Plot these values over time and based on the plot determine if the
following statement is true or false: The proportion of boys born in the US has
decreased over time.
<ol>
<li> True </li>
<li> False </li>
</ol>
```{r prop-boys-over-time}
# type your code for Question 5 here, and Knit
```
6. Create a new variable called `more_boys` which contains the value of either `TRUE`
if that year had more boys than girls, or `FALSE` if that year did not. Based on this
variable which of the following statements is true?
<ol>
<li> Every year there are more girls born than boys. </li>
<li> Every year there are more boys born than girls. </li>
<li> Half of the years there are more boys born, and the other half more girls born. </li>
</ol>
```{r more-boys-per-year}
# type your code for Question 6 here, and Knit
```
7. Calculate the boy-to-girl ratio each year, and store these values in a new variable called `prop_boy_girl` in the `present` dataset. Plot these values over time. Which of the following best describes the trend?
<ol>
<li> There appears to be no trend in the boy-to-girl ratio from 1940 to 2013. </li>
<li> There is initially an increase in boy-to-girl ratio, which peaks around 1960. After 1960 there is a decrease in the boy-to-girl ratio, but the number begins to increase in the mid 1970s. </li>
<li> There is initially a decrease in the boy-to-girl ratio, and then an increase between 1960 and 1970, followed by a decrease. </li>
<li> The boy-to-girl ratio has increased over time. </li>
<li> There is an initial decrease in the boy-to-girl ratio born but this number appears to level around 1960 and remain constant since then. </li>
</ol>
```{r prop-boy-girl-over-time}
# type your code for Question 7 here, and Knit
```
8. In what year did we see the most total number of births in the U.S.? *Hint:* Sort
your dataset in descending order based on the `total` column. You can do this
interactively in the data viewer by clicking on the arrows next to the variable
names. Or to arrange the data in a descenting order with new function: `descr` (for
descending order).
<ol>
<li> 1940 </li>
<li> 1957 </li>
<li> 1961 </li>
<li> 1991 </li>
<li> 2007 </li>
</ol>
```{r most-total-births}
# type your code for Question 8 here
# sample code is provided below, edit as necessary, uncomment, and then Knit
#present %>%
#  mutate(total = ?) %>%
#  arrange(desc(total))
```
## Resources for learning R and working in RStudio
That was a short introduction to R and RStudio, but we will provide you with more
functions and a more complete sense of the language as the course progresses. You
might find the following tips and resources helpful.
- In this course we will be using the `dplyr` (for data wrangling) and `ggplot2` (for
data visualization) extensively. If you are googling for R code, make sure
to also include these package names in your search query. For example, instead
of googling "scatterplot in R", google "scatterplot in R with ggplot2".
- The following cheathseets may come in handy throughout the course. Note that some
of the code on these cheatsheets may be too advanced for this course, however
majority of it will become useful as you progress through the course material.
- [Data wrangling cheatsheet](http://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf)
- [Data visualization cheatsheet](http://www.rstudio.com/wp-content/uploads/2015/12/ggplot2-cheatsheet-2.0.pdf)
- [R Markdown](http://www.rstudio.com/wp-content/uploads/2016/03/rmarkdown-cheatsheet-2.0.pdf)
- While you will get plenty of exercise working with these packages in the labs of
this course, if you would like further opportunities to practice we recommend
checking out the relevant courses at [DataCamp](https://www.datacamp.com/courses).
<div id="license">
This is a derivative of an [OpenIntro](https://www.openintro.org/stat/labs.php) lab, and is released under a [Attribution-NonCommercial-ShareAlike 3.0 United States](https://creativecommons.org/licenses/by-nc-sa/3.0/us/) license.
</div>
devtools::install_github("rstudio/rmarkdown")
restart
exit
library(dplyr)
library(ggplot2)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("shiny")
install_github("StatsWithR/statsr")
install.github("StatsWithR/statsr")
install_github("StatsWithR/statsr")
install.packages("devtools")
library(devtools)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("devtools")
library(devtools)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("shiny")
install_github("StatsWithR/statsr")
library(dplyr)
library(ggplot2)
library(statsr)
data(arbuthnot)
data(arbuthnot)
data("arbuthnot")
library(dplyr)
library(ggplot2)
library(statsr)
data(arbuthnot)
arbuthnot
View(arbuthnot)
dim(arbuthnot)
names(arbuthnot)
arbuthnot$boys
# type your code for the Question 2 here, and Knit
arbuthnot$girls
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_point()
?ggplot
5218 + 4683
arbuthnot$boys + arbuthnot$girls
arbuthnot <- arbuthnot %>%
mutate(total = boys + girls)
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line()
# type your code for the Exercise here, and Knit
arbuthnot <- arbuthnot %>%
mutate(ratio = boys / girls)
ggplot(data = arbuthnot, aes(x = year, y = ratio)) +
geom_line() +
geom_point()
library(dplyr)
library(ggplot2)
library(statsr)
data(arbuthnot)
arbuthnot
dim(arbuthnot)
names(arbuthnot)
arbuthnot$boys
# type your code for the Question 2 here, and Knit
arbuthnot$girls
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_point()
?ggplot
5218 + 4683
arbuthnot$boys + arbuthnot$girls
arbuthnot <- arbuthnot %>%
mutate(total = boys + girls)
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line()
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line() +
geom_point()
# type your code for the Exercise here, and Knit
arbuthnot <- arbuthnot %>%
mutate(ratio = boys / girls)
ggplot(data = arbuthnot, aes(x = year, y = ratio)) +
geom_line() +
geom_point()
library(dplyr)
library(ggplot2)
library(statsr)
data(arbuthnot)
arbuthnot
dim(arbuthnot)
names(arbuthnot)
arbuthnot$boys
# type your code for the Question 2 here, and Knit
arbuthnot$girls
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_point()
?ggplot
5218 + 4683
arbuthnot$boys + arbuthnot$girls
arbuthnot <- arbuthnot %>%
mutate(total = boys + girls)
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line()
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line() +
geom_point()
# type your code for the Exercise here, and Knit
arbuthnot <- arbuthnot %>%
mutate(ratio = boys / girls)
ggplot(data = arbuthnot, aes(x = year, y = ratio)) +
geom_line() +
geom_point()
arbuthnot <- arbuthnot %>%
mutate(more_boys = boys > girls)
arbuthnot <- arbuthnot %>%
mutate(more_boys = boys > girls)
ggplot(data = arbuthnot, aes(x = year, y = more_boys)
geoline() +
arbuthnot <- arbuthnot %>%
mutate(more_boys = boys > girls)
ggplot(data = arbuthnot, aes(x = year, y = more_boys)) +
geoline() +
geom_point()
ggplot(data = arbuthnot, aes(x = year, y = more_boys)) +
geom_line() +
geom_point()
View(arbuthnot)
View(arbuthnot)
data(present)
library(dplyr)
library(ggplot2)
library(statsr)
data(arbuthnot)
arbuthnot
dim(arbuthnot)
names(arbuthnot)
arbuthnot$boys
# type your code for the Question 2 here, and Knit
arbuthnot$girls
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_point()
?ggplot
5218 + 4683
arbuthnot$boys + arbuthnot$girls
arbuthnot <- arbuthnot %>%
mutate(total = boys + girls)
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line()
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line() +
geom_point()
# type your code for the Exercise here, and Knit
arbuthnot <- arbuthnot %>%
mutate(ratio = boys / girls)
ggplot(data = arbuthnot, aes(x = year, y = ratio)) +
geom_line() +
geom_point()
arbuthnot <- arbuthnot %>%
mutate(more_boys = boys > girls)
ggplot(data = arbuthnot, aes(x = year, y = more_boys)) +
geom_line() +
geom_point()
data(present)
data(present)
View(arbuthnot)
present
attributes(present)
dim(present)
# type your code for Question 4 here, and Knit
dim(present)
# type your code for Exercise here, and Knit
range(present$year)
View(present)
# type your code for Question 5 here, and Knit
present <- present %%
mutate(total = present$boys + present$girls)
# type your code for Question 5 here, and Knit
present <- present %%
mutate(total = boys + girls)
# type your code for Question 5 here, and Knit
present <- present %>%
mutate(total = boys + present$girls)
# type your code for Question 5 here, and Knit
present <- present %>%
mutate(total = present$boys + present$girls)
# type your code for Question 5 here, and Knit
present <- present %>%
mutate(total = present$boys + present$girls) %>%
mutate(prop_boys = present$boys / present$total)
ggplot?
a
?ggplot
# type your code for Question 5 here, and Knit
present <- present %>%
mutate(total = present$boys + present$girls) %>%
mutate(prop_boys = present$boys / present$total) %>%
ggplot(data = present, aes(x = years, y = prop_boys)) +
geom_point() +
geom_line()
ggplot(data = present, aes(x = years, y = prop_boys)) +
geom_point() +
geom_line()
# type your code for Question 5 here, and Knit
present <- present %>%
mutate(total = present$boys + present$girls) %>%
mutate(prop_boys = present$boys / present$total)
# type your code for Question 5 here, and Knit
present <- present %>%
mutate(total = present$boys + present$girls) %>%
mutate(prop_boys = present$boys / present$total)
ggplot(data = present, aes(x = years, y = prop_boys)) +
geom_point() +
geom_line()
ggplot(data = present, aes(x = year, y = prop_boys)) +
geom_point() +
geom_line()
?if
sd
if?
?if
a
# type your code for Question 6 here, and Knit
present <- present &>&
# type your code for Question 6 here, and Knit
present <- present %>%
mutate(more_boys = boys > girls)
ggplot(present, aes(x = more_boys, y = year)) +
geom_point()
ggplot(present, aes(y = more_boys, x = year)) +
geom_point()
present&moreboys
present&more_boys
present
present$more_boys
present$more_boys == FALSE
present$more_boys == TRUE
present$more_boys == 0
if (present$more_boys == FALSE) {print "yes"}
if (present$more_boys == FALSE) {print yes}
if (present$more_boys == FALSE) {print yes}
if (present$more_boys == FALSE) {
print yes
print("yes")
if (present$more_boys == FALSE) {
print("yes")
}
if (present$more_boys == FALSE) {
print("yes")
}
for data in present
if (present$more_boys == FALSE) {
print("yes")
}
for data in present
if (present$more_boys == TRUE) {
print("yes")
}
for (data in present) {
if (present$more_boys == TRUE) {
print("yes")
}
}
if (present$more_boys == FALSE) {
print("yes")
}
# type your code for Question 6 here, and Knit
present <- present %>%
mutate(more_boys = boys > girls)
ggplot(present, aes(y = more_boys, x = year)) +
geom_point()
for (data in present ) {
if (present$more_boys == FALSE) {
print("yes")
}
}
# type your code for Question 6 here, and Knit
present <- present %>%
mutate(more_boys = boys > girls)
ggplot(present, aes(y = more_boys, x = year)) +
geom_point()
for (data in present ) {
if (present$more_boys == TRUE) {
print("yes")
}
}
for (x in present ) {
if (present$more_boys == TRUE) {
print("yes")
}
}
for (line in present ) {
if (present$more_boys == TRUE) {
print("yes")
}
}
for (line in 1:73 ) {
if (present$more_boys == TRUE) {
print("yes")
}
}
for (line in present ) {
if (present$more_boys == TRUE) {
print("yes")
}
}
for (line in present&year ) {
if (present$more_boys == TRUE) {
print("yes")
}
}
for (line in present$year ) {
if (present$more_boys == TRUE) {
print("yes")
}
}
ggplot(present, aes(y = more_boys, x = year)) +
geom_point()
# type your code for Question 7 here, and Knit
present <- present %>%
mutate(prop_boy_girl = boys / girls)
# type your code for Question 7 here, and Knit
present <- present %>%
mutate(prop_boy_girl = boys / girls)
ggplot(present, aes(x = prop_boy_girl, y = year)) +
geom_line() +
geom_point()
# type your code for Question 7 here, and Knit
present <- present %>%
mutate(prop_boy_girl = boys / girls)
ggplot(present, aes(y = prop_boy_girl, x = year)) +
geom_line() +
geom_point()
# type your code for Question 8 here
# sample code is provided below, edit as necessary, uncomment, and then Knit
arrange(desc(total))
# type your code for Question 8 here
# sample code is provided below, edit as necessary, uncomment, and then Knit
arrange(desc(present$total))
# type your code for Question 8 here
# sample code is provided below, edit as necessary, uncomment, and then Knit
present %>%
mutate(total = boys + girls) %>%
arrange(desc(total))
