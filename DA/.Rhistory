<li> March </li>
<li> July </li>
<li> October </li>
<li> December </li>
</ol>
```{r highest-avg-dep-delay-month}
# type your code for Question 4 here, and Knit
```
5.  Which month has the highest median departure delay from an NYC airport?
<ol>
<li> January </li>
<li> March </li>
<li> July </li>
<li> October </li>
<li> December </li>
</ol>
```{r highest-median-dep-delay-month}
nycflights %>%
group_by(month) %>%
summarise(median_dd = median(dep_delay)) %>%
arrange(desc(median_dd))
```
6.  Is the mean or the median a more reliable measure for deciding which month(s) to
avoid flying if you really dislike delayed flights, and why?
<ol>
<li> Mean would be more reliable as it gives us the true average. </li>
<li> Mean would be more reliable as the distribution of delays is symmetric. </li>
<li> Median would be more reliable as the distribution of delays is skewed. </li>
<li> Median would be more reliable as the distribution of delays is symmetric. </li>
<li> Both give us useful information. </li>
</ol>
We can also visualize the distributions of departure delays across months using
side-by-side box plots:
```{r delay-month-box}
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) +
geom_boxplot()
```
There is some new syntax here: We want departure delays on the y-axis and the
months on the x-axis to produce side-by-side box plots. Side-by-side box plots
require a categorical variable on the x-axis, however in the data frame `month` is
stored as a numerical variable (numbers 1 - 12). Therefore we can force R to treat
this variable as categorical, what R calls a **factor**, variable with
`factor(month)`.
### On time departure rate for NYC airports
Suppose you will be flying out of NYC and want to know which of the
three major NYC airports has the best on time departure rate of departing flights.
Suppose also that for you a flight that is delayed for less than 5 minutes is
basically "on time". You consider any flight delayed for 5 minutes of more to be
"delayed".
In order to determine which airport has the best on time departure rate,
we need to
- first classify each flight as "on time" or "delayed",
- then group flights by origin airport,
- then calculate on time departure rates for each origin airport,
- and finally arrange the airports in descending order for on time departure
percentage.
Let's start with classifying each flight as "on time" or "delayed" by
creating a new variable with the `mutate` function.
```{r dep-type}
nycflights <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
```
The first argument in the `mutate` function is the name of the new variable
we want to create, in this case `dep_type`. Then if `dep_delay < 5` we classify
the flight as `"on time"` and `"delayed"` if not, i.e. if the flight is delayed
for 5 or more minutes.
Note that we are also overwriting the `nycflights` data frame with the new
version of this data frame that includes the new `dep_type` variable.
We can handle all the remaining steps in one code chunk:
```{r}
nycflights %>%
group_by(origin) %>%
summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
```
**The summarise step is telling R to count up how many records of the currently found group are on time - sum(dep_type == "on timeâ) - and divide that result by the total number of elements in the currently found group - n() - to get a proportion, then to store the answer in a new variable called ot_dep_rate.**
7.  If you were selecting an airport simply based on on time departure percentage,
which NYC airport would you choose to fly out of?
<ol>
<li> EWR </li>
<li> JFK </li>
<li> LGA </li>
</ol>
```{r on-time-dep-perc-airport}
# type your code for Question 7 here, and Knit
```
We can also visualize the distribution of on on time departure rate across
the three airports using a segmented bar plot.
```{r}
ggplot(data = nycflights, aes(x = origin, fill = dep_type)) +
geom_bar()
```
8.  Mutate the data frame so that it includes a new variable that contains the
average speed, `avg_speed` traveled by the plane for each flight (in mph). What is
the tail number of the plane with the fastest `avg_speed`? **Hint:** Average speed
can be calculated as distance divided by number of hours of travel, and note that
`air_time` is given in minutes. If you just want to show the `avg_speed` and
`tailnum` and none of the other variables, use the select function at the end of your
pipe to select just these two variables with `select(avg_speed, tailnum)`. You can
Google this tail number to find out more about the aircraft.
<ol>
<li> N666DN </li>
<li> N755US </li>
<li> N779JB </li>
<li> N947UW </li>
<li> N959UW </li>
</ol>
```{r fastest-avg-speed-tailnum}
nycflights <- nycflights %>%
mutate(avg_speed = distance / air_time / 60)
result <- nycflights %>%
arrange(desc(avg_speed))
first(result$tailnum)
```
9.  Make a scatterplot of `avg_speed` vs. `distance`. Which of the following is true
about the relationship between average speed and distance.
<ol>
<li> As distance increases the average speed of flights decreases. </li>
<li> The relationship is linear. </li>
<li> There is an overall postive association between distance and average speed.</li>
<li> There are no outliers. </li>
<li> The distribution of distances are uniform over 0 to 5000 miles. </li>
</ol>
```{r avg-speed-dist-scatter}
ggplot(data=result, aes(x=avg_speed, y=distance)) +
geom_point()
```
10.  Suppose you define a flight to be "on time" if it gets to the destination on
time or earlier than expected, regardless of any departure delays. Mutate the data
frame to create a new variable called `arr_type` with levels `"on time"` and
`"delayed"` based on this definition. Then, determine the on time arrival percentage
based on whether the flight departed on time or not. What proportion of flights  that
were `"delayed"` departing arrive `"on time"`?
[NUMERIC INPUT]
```{r on-time-arr-perc}
# type your code for Question 10 here, and Knit
#nycflights <- nycflights %>%
#  mutate(arr_type = ifelse(arr_delay <= 0, "on time", "delayed")) %>%
#  mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
#result <- nycflights %>%
#  filter(arr_type == "on time", dep_type == "delayed")
nycflights <- nycflights %>%
mutate(arr_type=ifelse(arr_delay<=0,"on time","delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(ot_arr_rate=sum(arr_type=="on time")/n())
unlink('2_cache', recursive = TRUE)
library(dplyr)
library(ggplot2)
library(statsr)
data(arbuthnot)
arbuthnot
dim(arbuthnot)
names(arbuthnot)
arbuthnot$boys
# type your code for the Question 2 here, and Knit
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_point()
?ggplot
5218 + 4683
arbuthnot$boys + arbuthnot$girls
arbuthnot <- arbuthnot %>%
mutate(total = boys + girls)
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line()
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line() +
geom_point()
# type your code for the Exercise here, and Knit
arbuthnot <- arbuthnot %>%
mutate(more_boys = boys > girls)
data(present)
# type your code for Question 4 here, and Knit
# type your code for Exercise here, and Knit
# type your code for Question 5 here, and Knit
# type your code for Question 6 here, and Knit
# type your code for Question 7 here, and Knit
# type your code for Question 8 here
# sample code is provided below, edit as necessary, uncomment, and then Knit
#present %>%
#  mutate(total = ?) %>%
#  arrange(desc(total))
library(statsr)
library(dplyr)
library(ggplot2)
data(nycflights)
names(nycflights)
str(nycflights)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 150)
rdu_flights <- nycflights %>%
filter(dest == "RDU")
ggplot(data = rdu_flights, aes(x = dep_delay)) +
geom_histogram()
rdu_flights %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
sfo_feb_flights <- nycflights %>%
filter(month == 2, dest == "SFO")
length(sfo_feb_flights)
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
geom_histogram()
rdu_flights %>%
group_by(origin) %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(median_ad = median(arr_delay), IQR_ad = IQR(arr_delay), n = ())
library(statsr)
library(dplyr)
library(ggplot2)
data(nycflights)
names(nycflights)
str(nycflights)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 150)
rdu_flights <- nycflights %>%
filter(dest == "RDU")
ggplot(data = rdu_flights, aes(x = dep_delay)) +
geom_histogram()
rdu_flights %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
sfo_feb_flights <- nycflights %>%
filter(month == 2, dest == "SFO")
length(sfo_feb_flights)
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
geom_histogram()
rdu_flights %>%
group_by(origin) %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(median_ad = median(arr_delay), IQR_ad = IQR(arr_delay), n = ())
library(statsr)
library(dplyr)
library(ggplot2)
data(nycflights)
names(nycflights)
str(nycflights)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 150)
rdu_flights <- nycflights %>%
filter(dest == "RDU")
ggplot(data = rdu_flights, aes(x = dep_delay)) +
geom_histogram()
rdu_flights %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
sfo_feb_flights <- nycflights %>%
filter(month == 2, dest == "SFO")
length(sfo_feb_flights)
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
geom_histogram()
rdu_flights %>%
group_by(origin) %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(median_ad = median(arr_delay), IQR_ad = IQR(arr_delay), n = ())
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(median_ad = median(arr_delay), IQR_ad = IQR(arr_delay), n = ())
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(median_ad = median(arr_delay), IQR_ad = IQR(arr_delay), n = n())
library(dplyr)
library(ggplot2)
library(statsr)
data(arbuthnot)
arbuthnot
dim(arbuthnot)
names(arbuthnot)
arbuthnot$boys
# type your code for the Question 2 here, and Knit
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_point()
?ggplot
5218 + 4683
arbuthnot$boys + arbuthnot$girls
arbuthnot <- arbuthnot %>%
mutate(total = boys + girls)
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line()
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line() +
geom_point()
# type your code for the Exercise here, and Knit
arbuthnot <- arbuthnot %>%
mutate(more_boys = boys > girls)
data(present)
# type your code for Question 4 here, and Knit
# type your code for Exercise here, and Knit
# type your code for Question 5 here, and Knit
# type your code for Question 6 here, and Knit
# type your code for Question 7 here, and Knit
# type your code for Question 8 here
# sample code is provided below, edit as necessary, uncomment, and then Knit
#present %>%
#  mutate(total = ?) %>%
#  arrange(desc(total))
data(present)
data(present)
str(present)
# type your code for Question 4 here, and Knit
dim(present)
View(present)
# type your code for Question 4 here, and Knit
dim(present)
# type your code for Exercise here, and Knit
range(present$year)
x <- 1
x
print(x)
msg <- "hello"
msg
print(msg)
x
x + msg
x + 2
msg + "sd"
x <- ##aksjdjash
2
x
x <- 1:20
x
x <- 1:30 %<% print(x)
x <- 1:30 %>% print(x)
x <- 1:30 %>% print(x)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
x <- 1:20 %>%
print()
x <- 1:20 %>%
print(x)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(statsr)
library(dplyr)
library(ggplot2)
data(nycflights)
names(nycflights)
str(nycflights)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 150)
rdu_flights <- nycflights %>%
filter(dest == "RDU")
ggplot(data = rdu_flights, aes(x = dep_delay)) +
geom_histogram()
rdu_flights %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
sfo_feb_flights <- nycflights %>%
filter(month == 2, dest == "SFO")
length(sfo_feb_flights)
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
geom_histogram()
rdu_flights %>%
group_by(origin) %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(median_ad = median(arr_delay), IQR_ad = IQR(arr_delay), n = n())
nycflights %>%
group_by(month) %>%
summarise(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
# type your code for Question 4 here, and Knit
nycflights %>%
group_by(month) %>%
summarise(median_dd = median(dep_delay)) %>%
arrange(desc(median_dd))
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) +
geom_boxplot()
nycflights <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
nycflights %>%
group_by(origin) %>%
summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
# type your code for Question 7 here, and Knit
ggplot(data = nycflights, aes(x = origin, fill = dep_type)) +
geom_bar()
nycflights <- nycflights %>%
mutate(avg_speed = distance / air_time / 60)
result <- nycflights %>%
arrange(desc(avg_speed))
first(result$tailnum)
ggplot(data=result, aes(x=avg_speed, y=distance)) +
geom_point()
# type your code for Question 10 here, and Knit
#nycflights <- nycflights %>%
#  mutate(arr_type = ifelse(arr_delay <= 0, "on time", "delayed")) %>%
#  mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
#result <- nycflights %>%
#  filter(arr_type == "on time", dep_type == "delayed")
nycflights <- nycflights %>%
mutate(arr_type=ifelse(arr_delay<=0,"on time","delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(ot_arr_rate=sum(arr_type=="on time")/n())
cls
clean
vector(mmode = "logical", length = 0L)
vector(mmode = "logical", length = 0)
vector(mode = "logical", length = 0)
vector(mode = "logical", length = 0L)
x <- vector(mode = "logical", length = 0L)
x
x <- vector(mode = "logical", length = 1L)
x
x <- vector(mode = "logical", length = 2L)
x
x <- vector(mode = "logical", length = 10L)
x
x <- vector(mode = "logical", length = 10R)
x <- vector(mode = "logical", length = 10)
x
dim(x)
x
x <- 1:20
dim(x)
x
names(x)
attributes(x)
x<-c(1,2)
x
dim(x)
x<-9:29
x
x <- vector("numeric", length =10)
x
x <- c(1, "a")
x
x <- c(T,2)
x
x <- c(F,2)
x <- c(F,2)
x
x <- 0:4
class(x)
as.numeric(x)
x
as.array(x)
x
as.character(x)
x
dim(x)
class(x)
x
as.character(x)
x
x <- as.character(x)
x
class(x)
x <- c("a","b")
as.character(x)
as.complex(x)
x <- list(1,"a",T,NaN)
x
class(x$1)
class(x$1)
m <- matrix(nrow = 2, ncol = 4)
m <- 1
m
m <- matrix(1:8, nrow = 2, ncol = 4)
m
class(m)
attr(m)
attributes(m)
x <- factor(c(T,T,F,F,F))
x
unclass(x)
table(x)
x <- factor(c(T,T,F,F,F), levels = c(F,T))
x
x <- factor(c(T,T,F,F,F), levels = c(T,F))
x <- factor(c(T,T,F,F,F), levels = c(T,F))
x
co2price = read.csv("f56_pollutant_prices.csv")
co2price = read.csv("f56_pollutant_prices.csv")
getwd()
setwd("C:/Users/YZ/OneDrive/Arbeit/Coursera/Statistics with R")
setwd("D:\coursera\Online_course\Data_Analysis")
setwd("D:/coursera/Online_course/Data_Analysis")
install.packages("swirl")
swirl()
library("swirl")
swirl
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
